/*
 * TaxCloud.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using TaxCloud.PCL;
using TaxCloud.PCL.Utilities;
using TaxCloud.PCL.Http.Request;
using TaxCloud.PCL.Http.Response;
using TaxCloud.PCL.Http.Client;
using TaxCloud.PCL.Exceptions;
using TaxCloud.PCL.Models;

namespace TaxCloud.PCL.Controllers
{
    public partial class USMainController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static USMainController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static USMainController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new USMainController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// A simple ping to check if the service is working
        /// </summary>
        /// <param name="authInfo">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreatePing(Models.BaseAuth authInfo)
        {
            Task t = CreatePingAsync(authInfo);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// A simple ping to check if the service is working
        /// </summary>
        /// <param name="authInfo">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreatePingAsync(Models.BaseAuth authInfo)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Ping");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(authInfo);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Inspect and verify a customer provided address to ensure the most accurate tax jurisdiction(s) can be identified.
        /// </summary>
        /// <param name="addressToVerify">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateVerifyAddress(Models.Address addressToVerify)
        {
            Task t = CreateVerifyAddressAsync(addressToVerify);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Inspect and verify a customer provided address to ensure the most accurate tax jurisdiction(s) can be identified.
        /// </summary>
        /// <param name="addressToVerify">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateVerifyAddressAsync(Models.Address addressToVerify)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/VerifyAddress");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(addressToVerify);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 